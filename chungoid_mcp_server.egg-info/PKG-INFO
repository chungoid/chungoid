Metadata-Version: 2.4
Name: chungoid-mcp-server
Version: 0.2.0
Summary: Meta-Cognitive Process server for Chungoid Bootstrapper
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: annotated-types==0.7.0
Requires-Dist: anyio==4.9.0
Requires-Dist: asgiref==3.8.1
Requires-Dist: attrs==25.3.0
Requires-Dist: babel==2.17.0
Requires-Dist: backoff==2.2.1
Requires-Dist: bcrypt==4.3.0
Requires-Dist: beautifulsoup4==4.13.4
Requires-Dist: cachetools==5.5.2
Requires-Dist: certifi==2025.4.26
Requires-Dist: charset-normalizer==3.4.2
Requires-Dist: chroma-hnswlib==0.7.6
Requires-Dist: chromadb==1.0.7
Requires-Dist: click==8.1.8
Requires-Dist: coloredlogs==15.0.1
Requires-Dist: Deprecated==1.2.18
Requires-Dist: dill==0.4.0
Requires-Dist: distro==1.9.0
Requires-Dist: docutils==0.21.2
Requires-Dist: durationpy==0.9
Requires-Dist: exceptiongroup==1.2.2
Requires-Dist: fastapi==0.115.9
Requires-Dist: fastmcp==2.2.6
Requires-Dist: filelock==3.18.0
Requires-Dist: flatbuffers==25.2.10
Requires-Dist: fsspec==2025.3.2
Requires-Dist: google-auth==2.39.0
Requires-Dist: googleapis-common-protos==1.70.0
Requires-Dist: grpcio==1.71.0
Requires-Dist: h11==0.16.0
Requires-Dist: httpcore==1.0.9
Requires-Dist: httptools==0.6.4
Requires-Dist: httpx==0.28.1
Requires-Dist: httpx-sse==0.4.0
Requires-Dist: huggingface-hub==0.30.2
Requires-Dist: humanfriendly==10.0
Requires-Dist: idna==3.10
Requires-Dist: imagesize==1.4.1
Requires-Dist: importlib_metadata==8.6.1
Requires-Dist: importlib_resources==6.5.2
Requires-Dist: Jinja2==3.1.6
Requires-Dist: jsonschema==4.23.0
Requires-Dist: jsonschema-specifications==2025.4.1
Requires-Dist: kubernetes==32.0.1
Requires-Dist: markdown-it-py==3.0.0
Requires-Dist: MarkupSafe==3.0.2
Requires-Dist: mcp==1.7.0
Requires-Dist: mdurl==0.1.2
Requires-Dist: mmh3==5.1.0
Requires-Dist: mpmath==1.3.0
Requires-Dist: numpy==2.2.5
Requires-Dist: oauthlib==3.2.2
Requires-Dist: onnxruntime==1.21.1
Requires-Dist: openapi-pydantic==0.5.1
Requires-Dist: opentelemetry-api==1.32.1
Requires-Dist: opentelemetry-exporter-otlp-proto-common==1.32.1
Requires-Dist: opentelemetry-exporter-otlp-proto-grpc==1.32.1
Requires-Dist: opentelemetry-instrumentation==0.53b1
Requires-Dist: opentelemetry-instrumentation-asgi==0.53b1
Requires-Dist: opentelemetry-instrumentation-fastapi==0.53b1
Requires-Dist: opentelemetry-proto==1.32.1
Requires-Dist: opentelemetry-sdk==1.32.1
Requires-Dist: opentelemetry-semantic-conventions==0.53b1
Requires-Dist: opentelemetry-util-http==0.53b1
Requires-Dist: orjson==3.10.18
Requires-Dist: overrides==7.7.0
Requires-Dist: packaging==25.0
Requires-Dist: pbr==6.1.1
Requires-Dist: pluggy==1.5.0
Requires-Dist: posthog==4.0.1
Requires-Dist: protobuf==5.29.4
Requires-Dist: pyasn1==0.6.1
Requires-Dist: pyasn1_modules==0.4.2
Requires-Dist: pydantic==2.11.4
Requires-Dist: pydantic-settings==2.9.1
Requires-Dist: pydantic_core==2.33.2
Requires-Dist: Pygments==2.19.1
Requires-Dist: PyPika==0.48.9
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: python-dotenv==1.1.0
Requires-Dist: python-multipart==0.0.20
Requires-Dist: PyYAML==6.0.2
Requires-Dist: referencing==0.36.2
Requires-Dist: requests==2.32.3
Requires-Dist: requests-oauthlib==2.0.0
Requires-Dist: rich==14.0.0
Requires-Dist: roman-numerals-py==3.1.0
Requires-Dist: rpds-py==0.24.0
Requires-Dist: rsa==4.9.1
Requires-Dist: setuptools==80.1.0
Requires-Dist: shellingham==1.5.4
Requires-Dist: six==1.17.0
Requires-Dist: sniffio==1.3.1
Requires-Dist: snowballstemmer==2.2.0
Requires-Dist: soupsieve==2.7
Requires-Dist: sse-starlette==2.3.3
Requires-Dist: starlette==0.45.3
Requires-Dist: stevedore==5.4.1
Requires-Dist: sympy==1.14.0
Requires-Dist: tenacity==9.1.2
Requires-Dist: tokenizers==0.21.1
Requires-Dist: tqdm==4.67.1
Requires-Dist: typer==0.15.3
Requires-Dist: typing-inspection==0.4.0
Requires-Dist: typing_extensions==4.13.2
Requires-Dist: urllib3==2.4.0
Requires-Dist: uvicorn==0.34.2
Requires-Dist: uvloop==0.21.0
Requires-Dist: watchfiles==1.0.5
Requires-Dist: websocket-client==1.8.0
Requires-Dist: websockets==15.0.1
Requires-Dist: wrapt==1.17.2
Requires-Dist: zipp==3.21.0
Provides-Extra: dev
Requires-Dist: pytest<8.4,>=8.3; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: ruff==0.11.8; extra == "dev"
Requires-Dist: bandit==1.8.3; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: types-PyYAML; extra == "dev"
Requires-Dist: types-filelock; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: build==1.2.2.post1; extra == "dev"
Provides-Extra: docs
Requires-Dist: Sphinx==8.2.3; extra == "docs"
Requires-Dist: sphinx-rtd-theme==3.0.2; extra == "docs"
Requires-Dist: alabaster==1.0.0; extra == "docs"
Requires-Dist: Babel==2.17.0; extra == "docs"
Requires-Dist: imagesize==1.4.1; extra == "docs"
Requires-Dist: snowballstemmer==2.2.0; extra == "docs"
Requires-Dist: sphinxcontrib-applehelp==2.0.0; extra == "docs"
Requires-Dist: sphinxcontrib-devhelp==2.0.0; extra == "docs"
Requires-Dist: sphinxcontrib-htmlhelp==2.1.0; extra == "docs"
Requires-Dist: sphinxcontrib-jquery==4.1; extra == "docs"
Requires-Dist: sphinxcontrib-jsmath==1.0.1; extra == "docs"
Requires-Dist: sphinxcontrib-qthelp==2.0.0; extra == "docs"
Requires-Dist: sphinxcontrib-serializinghtml==2.0.0; extra == "docs"
Dynamic: license-file

<!-- Placeholder for Banner Image -->
<!-- ![Project Banner](URL_TO_YOUR_BANNER_IMAGE.png) -->
<p align="center">
  <img src="docs/images/banner.png" alt="Chungoid MCP Banner">
</p>

# Chungoid MCP Server

**Version:** 0.2.0 (See `pyproject.toml`)
**License:** Apache 2.0 ([LICENSE](LICENSE))

**Goal:** Develop a Meta-Cognitive Process (MCP) server that orchestrates a flexible, iterative software development workflow, leveraging contextual awareness (ChromaDB), self-analysis, and striving towards greater agent autonomy.

## Overview

This project implements the **Chungoid MCP server**, a system designed to manage a staged software development process guided by an AI agent. It allows an AI (like Gemini via Cursor or other MCP-compatible clients) to interact with your local development environment through a defined toolset.

**Key Features:**

*   **Staged Workflow:** Uses YAML-defined stages (`server_prompts/stages/`) to guide the development process from discovery to release.
*   **State Management:** Tracks project progress and artifact locations in `.chungoid/project_status.json`.
*   **Contextual Awareness (Optional but HIGHLY recommended):** Leverages a separate ChromaDB server to store and retrieve project context (planning documents, code snippets, reflections) across sessions, enhancing the AI's understanding.
*   **Extensible Tools:** Provides a foundation for adding new tools the AI can use.
*   **Integration Tested:** Includes a suite of integration tests (`tests/test_integration.py`) verifying the core workflow.

## Project Structure

```plaintext
chungoid-mcp/
├── .chungoid/          # Project status (project_status.json) & lock file
├── .venv/              # Python virtual environment (Created by user)
├── dev-docs/           # Development documentation artifacts (design, planning, validation, reports)
│   ├── design/
│   ├── planning/
│   ├── release/
│   ├── reports/
│   └── validation/
├── dist/               # Built package distribution files (Created by `python -m build`)
├── docs/               # Generated user/API documentation (via Sphinx)
│   ├── _build/         # HTML output
│   └── ... (source .rst files)
├── server_prompts/     # Stage definitions (stage*.yaml), common templates, initial status
├── src/                # (Currently empty, core logic in root scripts)
├── tests/              # Unit and integration tests
│   └── __pycache__/
├── utils/              # Core utility modules (state_manager, chroma_utils, etc.)
│   └── __pycache__/
├── .env.template       # Template for environment variables (Primarily for CHUNGOID_PROJECT_DIR now)
├── .env                # Optional: Local environment variables (e.g., CHUNGOID_PROJECT_DIR)
├── config.yaml         # <<< NEW: Main configuration file (logging, ChromaDB, etc.) >>>
├── .gitignore          # Specifies intentionally untracked files
├── application_security.py # (Placeholder/Future work)
├── chungoidmcp.py      # Main MCP server script (STDIO entry point)
├── stage_executor.py   # Logic for executing individual stages
├── requirements.txt    # Project dependencies
├── pyproject.toml      # Build system and project metadata (PEP 517/518)
├── LICENSE             # Project license (Apache 2.0)
└── README.md           # This file
```

## Installation

1.  **Prerequisites:**
    *   Python >= 3.10 (Check with `python --version`)
    *   `pip` and `venv` (Usually included with Python)
    *   Git (For cloning)

2.  **Clone the repository:**
    ```bash
    git clone https://github.com/chungoid/chungoid.git # Replace with your actual repo URL if different
    cd chungoid-mcp
    ```

3.  **Create and activate a virtual environment:**
    ```bash
    python3 -m venv .venv
    # On Linux/macOS:
    source .venv/bin/activate
    # On Windows (Git Bash/WSL):
    # source .venv/Scripts/activate
    # On Windows (Command Prompt):
    # .venv\\Scripts\\activate.bat
    # On Windows (PowerShell):
    # .venv\\Scripts\\Activate.ps1
    ```
    *(You should see `(.venv)` at the beginning of your terminal prompt)*

4.  **Install dependencies:**
    ```bash
    # Ensure pip is up-to-date within the venv
    python -m pip install --upgrade pip
    # Install project requirements
    python -m pip install -r requirements.txt
    ```

## Configuration

Chungoid MCP uses a `config.yaml` file in the root directory for its primary configuration.

```yaml
# config.yaml (Example)

logging:
  level: "INFO" # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "text" # text, json
  file: "chungoid_mcp_server.log"
  max_bytes: 10485760 # 10 MB
  backup_count: 5

chromadb:
  client_type: "http" # http, persistent
  host: "localhost"   # Hostname for http client
  port: 8000          # Port for http client
  persist_path: "./chroma" # Filesystem path for persistent client

# Add other sections as needed
```

*   **Defaults:** Sensible defaults are used if `config.yaml` is missing or incomplete.
*   **Environment Overrides:** You can override any setting using environment variables prefixed with `CHUNGOID_`. For example, `CHUNGOID_LOGGING_LEVEL=DEBUG` or `CHUNGOID_CHROMADB_CLIENT_TYPE=persistent`.
*   **Project Directory:** The main way to specify the project directory Chungoid should operate on is via the `CHUNGOID_PROJECT_DIR` environment variable, typically set in your client's `mcp.json` (see Usage below).

## ChromaDB Setup (Optional but Recommended)

Chungoid MCP uses ChromaDB (configured via `config.yaml` or environment variables) for enhanced context management (storing/retrieving artifacts and reflections). While optional, running a local ChromaDB instance is needed to fully utilize these features and pass all integration tests.

## Usage (Quick Start)

1.  **Configure Client (`mcp.json`):**
    *   Add the following to your user `mcp.json` (e.g., `~/.cursor/mcp.json`), **replacing the `/path/to/...` parts with the absolute path** to your cloned `chungoid-mcp` directory and its virtual environment:
        ```json
        {
          "mcpServers": {
            "chungoid_mcp_server": { 
              "transportType": "stdio",
              "command": "/path/to/your/GLOBAL/chungoid-mcp/.venv/bin/python", 
              "args": [
                "/path/to/your/GLOBAL/chungoid-mcp/chungoidmcp.py" 
              ],
              "env": {
                "CHUNGOID_PROJECT_DIR": "${workspaceFolder}",
                # You can also set overrides here, e.g.:
                # "CHUNGOID_LOGGING_LEVEL": "DEBUG"
              }
            }
            // ... other servers ...
          }
        }
        ```
    *   This tells your client how to run the server and uses `${workspaceFolder}` to automatically target the project you have open.

2.  **Restart Editor & Select Server:**
    *   Restart your editor (Cursor/VS Code) for the `mcp.json` changes to load.
    *   Select `chungoid_mcp_server` (or your chosen name) as the active MCP server in your editor.

3.  **Start ChromaDB (Optional):**
    *   If using ChromaDB for context, ensure it's running and accessible based on your `config.yaml` or environment settings (e.g., for the default HTTP client: `chroma run --host localhost --port 8000`).

4.  **Initialize & Run Workflow (via Client):**
    *   Open the project you want Chungoid to work on in your editor (this becomes `${workspaceFolder}`).
    *   Using your configured client (`@chungoid_mcp_server`), run these commands:
        ```
        # 1. Create .chungoid structure
        @chungoid_mcp_server initialize_project

        # 2. Set context for this session (needed after init)
        @chungoid_mcp_server set_project_context

        # 3. Verify setup (optional but recommended)
        @chungoid_mcp_server get_project_status

        # 4. Start the workflow
        @chungoid_mcp_server execute_next_stage

        begin discussing your goal with 
        ```
    *   Follow the prompts from the server/AI, using `submit_stage_artifacts` and `execute_next_stage` as needed.

## Current Status (Run 7 Focus)

The primary goal of Run 7 was to debug and resolve issues related to ChromaDB persistence and artifact search functionality. Key findings and fixes include:

*   **Switched to `chromadb.HttpClient`:** Identified a mismatch between the configured `PersistentClient` and the server running in HTTP mode. Updated configuration and client initialization logic to use `HttpClient`.
*   **Fixed `await` Errors:** Corrected `TypeError` exceptions caused by incorrectly awaiting synchronous StateManager methods in tool handlers (`handle_find_artifacts`, `handle_submit_stage_artifacts`).
*   **Verified Artifact Storage/Retrieval:** Confirmed via direct checks and successful `find_artifacts` calls (using content-based queries) that artifacts are now correctly stored in and retrieved from ChromaDB.
*   **Improved Logging:** Added more detailed logging around ChromaDB operations, although file logging behavior remains inconsistent.
*   **Metadata Enhancement:** Added `description` and `keywords` to stored artifact metadata (though retrieval via `list_artifacts` needs further investigation).

**Outcome:** The core ChromaDB integration issues were successfully resolved in Run 7. Artifacts are persisted and searchable via semantic queries.

## Development & Testing

*   **Tests:** Run the integration test suite. Requires ChromaDB server running (see ChromaDB Setup and configuration).
    ```bash
    python -m pytest tests/
    # Open docs/_build/html/index.html in your browser
    ```

## Showcase Suggestions

Consider adding screenshots or GIFs to this README demonstrating:
*   An example interaction with the AI agent using the server tools.

## Contributing

Contributions are welcome! Please fork the repository, create a feature branch, and submit a pull request. Ensure tests pass and code adheres to linting/formatting standards.

## License

This project is licensed under the Apache License 2.0. See the [LICENSE](LICENSE) file for details.
